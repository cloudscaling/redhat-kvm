heat_template_version: 2016-04-08

description: >
  Parameters for deploying an ScaleIO over OpenStack environment.

parameters:

  servers:
    type: json

  UsePuppetsFromUpstream:
    type: boolean
    default: false
    description: Use puppet modules from upstream instead of puppet forge.
  PackagesSourceURL:
    type: string
    description: Where to get packages of ScaleIO for installation.
  ScaleIODriverFTP:
    type: string
    default: "ftp://QNzgdxXix:Aw3wFAwAq3@ftp.emc.com"
    description: |
      URL for driver_sync.sh script from sdc/xcache packages to sync & verify driver.

  RolesForSDS:
    type: string
    default: blockstorage
    description: Comma separated list of roles to insall SDS on.
  GatewayPort:
    type: number
    default: 4443
    description: Port where gateway will listen.

  ScaleIOAdminPassword:
    type: string
    default: "Default_password"
    description: "MDM password for admin"
  ScaleIOClientPassword:
    type: string
    default: "Client_password"
    description: "Password for scaleio_client user that will be used for openstack services"

  DevicePaths:
    type: string
    description: Comma separated list of devices, e.g. /dev/sdb,/dev/sdc.


  ProtectionDomain:
    type: string
    default: default
    description: Name of first protection domain. Next domains will get names like default_2, default_3.
  ProtectionDomainNodes:
    type: number
    default: 100
    description: >
        If number of nodes gets lasrgert than this threshould new protection domain will be created.
        Note, in that case it is needed to add at least 3 new nodes with Storage role to make new domain operationable.
  StoragePools:
    type: string
    default: default
    label: Storage pools
    description: >
        Comma separated list for splitting devices between them.
        It could be just one element if all devices are belong to the one pool.
  ProvisioningType:
    type: string
    default: thin
    description: Thin/Thick provisioning for ephemeral and persistent volumes.
  UseScaleioForGlance:
    type: boolean
    default: false
    description: Glance uses ScaleIO as a backend for images if the option enabled. It uses cinder backend in Glance to store images on ScaleIO.

resources:
  ScaleIOConfigData:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: UsePuppetsFromUpstream
      - name: PackagesSourceURL
      - name: ScaleIODriverFTP
      - name: RolesForSDS
      - name: GatewayPort
      - name: ScaleIOAdminPassword
      - name: ScaleIOClientPassword
      - name: DevicePaths
      - name: ProtectionDomain
      - name: StoragePools
      config: |
        #!/bin/bash -e
        FILE='/etc/scaleio.env'
        rm -f $FILE
        echo "export UsePuppetsFromUpstream='$UsePuppetsFromUpstream'" >> $FILE
        echo "export PackagesSourceURL='$PackagesSourceURL'" >> $FILE
        echo "export ScaleIODriverFTP='$ScaleIODriverFTP'" >> $FILE
        echo "export RolesForSDS='$RolesForSDS'" >> $FILE
        echo "export GatewayPort='$GatewayPort'" >> $FILE
        echo "export ScaleIOAdminPassword='$ScaleIOAdminPassword'" >> $FILE
        echo "export ScaleIOClientPassword='$ScaleIOClientPassword'" >> $FILE
        echo "export DevicePaths='$DevicePaths'" >> $FILE
        echo "export ProtectionDomain='$ProtectionDomain'" >> $FILE
        echo "export StoragePools='$StoragePools'" >> $FILE

  ScaleIODeploymentData:
    type: OS::Heat::SoftwareDeployments
    properties:
      servers:  {get_param: servers}
      config: {get_resource: ScaleIOConfigData}
      input_values:
        UsePuppetsFromUpstream: {get_param: UsePuppetsFromUpstream}
        PackagesSourceURL: {get_param: PackagesSourceURL}
        ScaleIODriverFTP: {get_param: ScaleIODriverFTP}
        RolesForSDS: {get_param: RolesForSDS}
        GatewayPort: {get_param: GatewayPort}
        ScaleIOAdminPassword: {get_param: ScaleIOAdminPassword}
        ScaleIOClientPassword: {get_param: ScaleIOClientPassword}
        DevicePaths: {get_param: DevicePaths}
        ProtectionDomain: {get_param: ProtectionDomain}
        StoragePools: {get_param: StoragePools}

